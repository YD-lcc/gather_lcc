name: openmptcprouter
on:
  push:
    branches: 
      - 0.78.0

env:
  REPO_URL: 'https://github.com/WillzenZou/Gather'
  OMR_KERNEL: '5.4'

jobs:
  build:
    strategy:
      matrix:
        OMR_TARGET: [nanopi_neo]
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
    - name: Branch name
      id: branch_name
      run: |
        echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}
        echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
        echo ::set-output name=WORKSPACE::${GITHUB_WORKSPACE}
    - name: Prepare
      run: |
        sudo apt-get update
        sudo apt-get install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
    - name: Free disk space
      run: |
        df -h
        sudo swapoff -a >/dev/null 2>&1 || true
        sudo rm -f /swapfile >/dev/null 2>&1 || true
        sudo apt-get autoremove -y >/dev/null 2>&1 || true
        sudo apt-get autoclean -y >/dev/null 2>&1 || true
        sudo rm -rf "/usr/local/share/boost" >/dev/null 2>&1 || true
        sudo rm -rf "$AGENT_TOOLSDIRECTORY" >/dev/null 2>&1 || true
        sudo docker rmi $(docker images -qf "dangling=true") >/dev/null 2>&1 || true
        df -h
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: 0.78.0
        path: './omr'
        token: ${{ secrets.PRI_TOKEN }}
    - name: Build toolchain
      env:
        OMR_TARGET: ${{ matrix.OMR_TARGET }}
      run: |
        (cd ./omr && bash build.sh prepare {tools,toolchain}/install -j$(nproc)) || bash build.sh prepare {tools,toolchain}/install -j1 V=s
    - name: Prepare WorkDir
      run: |
        cd ./omr
        ls -al
        ls -al nanopi_neo/source/package/kernel || true
        pwd
    - name: Build packages
      working-directory: ./omr
      env:
        OMR_TARGET: ${{ matrix.OMR_TARGET }}
      run: |
        make IGNORE_ERRORS=m -C $OMR_TARGET/source package/{compile,install,index} -j$(nproc) || make IGNORE_ERRORS=m -C $OMR_TARGET/source package/{compile,install,index} -j1 V=s
    - name: Build image
      working-directory: ./omr
      env:
        OMR_TARGET: ${{ matrix.OMR_TARGET }}
      run: |
        make IGNORE_ERRORS=m -C $OMR_TARGET/source target/install -j$(nproc) || make IGNORE_ERRORS=m -C $OMR_TARGET/source target/install -j1 V=s
    - name: zip # This would actually build your project, using zip for an example artifact
      run: |
        mkdir ./omr/${{ matrix.OMR_TARGET }}/output || true
        zip -r ./omr/${{ matrix.OMR_TARGET }}/output/${{ matrix.OMR_TARGET }}${{ github.sha }}.zip ./omr/${{ matrix.OMR_TARGET }}/source/.config ./omr/${{ matrix.OMR_TARGET }}/source/bin
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PRI_TOKEN }}
      with:
        tag_name: ${{ matrix.OMR_TARGET }}${{ github.sha }}
        release_name: Release ${{ matrix.OMR_TARGET }} ${{ github.sha }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PRI_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a>
        asset_path: ./omr/config-nanopi_neo
        asset_name: config-nanopi_neo
        asset_content_type: application/octet-stream
    - name: Upload Release Asset1
      id: upload-release-asset1
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PRI_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./omr/${{ matrix.OMR_TARGET }}/output/${{ matrix.OMR_TARGET }}${{ github.sha }}.zip
        asset_name: ${{ matrix.OMR_TARGET }}${{ github.sha }}.zip
        asset_content_type: application/zip

#    - name: Deliver firmware
#      uses: actions/upload-artifact@v2
#      with:
#        name: ${{ matrix.OMR_TARGET }}
#        path: ./omr/${{ matrix.OMR_TARGET }}/source/.config
#    - name: Upload artifacts
#      uses: actions/upload-artifact@v2
#      with:
#        name: ${{ matrix.OMR_TARGET }}
#        path: ./omr/${{ matrix.OMR_TARGET }}/source/bin

